                                                       ____  _____
                           ________  _________  ____  / __ \/ ___/
                          / ___/ _ \/ ___/ __ \/ __ \/ / / /\__ \
                         / /  /  __/ /__/ /_/ / / / / /_/ /___/ /
                        /_/   \___/\___/\____/_/ /_/\____//____/

======================================================================

  title:        ReconOS

  project:      ReconOS
  author:       Christoph RÃ¼thing, University of Paderborn
  description:  This is step by step guide introduces the usage of
                ReconOS by setting up the sort demo application.

======================================================================

0. Prerequisites

This guide assumes that you have basic knowledge of the development
for an FPGA and setup the appropriate tools and your board. The
following list includes all prerequisites:

  - Linux workstation with a distribution of your choice including
     * minicom
     * NFS server

  - Xilinx ISE Design Tools (Version 14.6 or 14.7 for this guide)
    including the following components
     * Xilinx Platform Studio (XPS)
     * ARM compiler collection
     * Software Development Kit (SDK)
     * Xilinx Microprocessor Debugger (XMD)

  - Evaluation board connected to your workstation
    Currently only the ML605 board is supported
     * JTAG connection to program the FPGA
     * UART connection to interact with the board

This guide uses several external sources and downloads them to your
local machine. To make shure that everything works fine you can use
the follwing tested versions or can try it with the newest ones
available:

  - Linux Kernel: http://github.com/Xilinx/linux-xlnx
    tag: xilinx-v14.7

  - U-Boot: http://github.com/Xilinx/u-boot-xlnx
    tag: xilinx-v14.7

  - Busybox: http://git.busybox.net/busybox
    tag: 1_21_1


1. Introduction

The sort demo is an example application to demonstrate ReconOS and its
concepts. It uses both hardware and software threads to sort a bunch of
data by using mboxes to synchronize the different threads and the memory
subsystem of ReconOS to access the data.
You can use ReconOS under different operating systems and on different
FPGAs but this guide only covers the Xilinx ML605 board running the
Linux operating system.


2. Setup ReconOS

As a first step you should inform you about the general ideas behind
ReconOS and its architecture.

At first you should think about a directory structure you want to use.
As starting point you can use the following one:

  $HOME/reconos = $WD
    \- reconos             -> the ReconOS repository = $RECONOS
    \- linux-xlnx          -> the Linux kernel sources
    \- busybox             -> the busybox sources
    \- nfs                 -> the root filesystem
    \- microblaze_v2.0_le  -> gnu tools for microblaze

This guide assumes this structure, so be aware if you change it.

2.1 Download GNU-Toolchain for microblaze

To compile applications for the microblaze processor we need a
compiler toolchain. The microblaze processor lacks a stable
toolchain and therefore we need to use different ones for
different purposes.

  1. Checkout toolchain repository
     > cd $WD
     > git clone git://git.xilinx.com/xldk/microblaze_v2.0_le.git

  2. Extract the toolchain
     > cd microblaze_v2.0_le
     > tar xfz microblazeel-unknown-linux-gnu.tgz

2.2 Setup the ReconOS toolchain

At first we need to checkout the ReconOS repository:

  > cd $WD
  > git clone https://github.com/EPiCS/reconos.git

To use the ReconOS toolchain you must configure it to your needs. Therefore,
open $WD/reconos/tools/environment/microblaze_linux.sh and adjust it to
your machine:

  xil_tools:    enter the path to your Xilinx tools
                for example /opt/Xilinx/14.7
  gnutool:      enter the path to the gnutoolchain you want to use
                in this case /opt/Xilinx/14.7/ISE_DS/EDK/gnu/microblaze/linux_toolchain/lin64_le/bin/microblazeel-xilinx-linux-gnu-
  reconos_arch: no need to change this for this guide
  reconos_os:   no need to change this for this guide
  reconos_mmu:  no need to change this for this guide

  KDIR:  enter the path to the linux kernel
         in this case: $HOME/reconos/linux-xlnx

After setting up you can simply source the main setup script by

 > source $WD/reconos/tools/environment/setup_reconos_toolchain.sh microblaze_linux

If you do not specify a configuration the default configuration
tools/environment/default.sh is used which should be a link to the
linux_zynq.sh configuration file. To change this, perform the following steps:

 > cd $WD/reconos/tools/environment
 > ln -sf microblaze_linux.sh default.sh

Now you can compile applications to run on the Micorblaze processor, use the
Xilinx tools and use the ReconOS scripts.


3. Setup Linux

3.1 Configure Linux

  1. Download the Linux sources and change into this directory
     > cd $WD
     > git clone https://github.com/Xilinx/linux-xlnx.git
     > cd linux-xlnx

  3. Configure Linux by using the default configuration
     > make mmu_defconfig

  4. Adjust configuration to ReconOS
     > make menuconfig

     Set the following options:
       Platform Options -> Targeted FPGA family: virtex6
       Platform Options -> Physical address where Linux Kernel is: 0x20000000
       Platform Options -> Core version number: 8.50.b
       Processor Type and Features -> Commandline:
         console=ttyUL1,115200 root=/dev/nfs rw nfsroot=192.168.42.1:/nfs/zynqn,tcp ip=192.168.42.2:::255.255.255.0:reconos:eth0:off earlyprintk
         by replacing /nfs/zynqn by /home/<your username>/reconos/nfs (the path to your nfs share) and eventually the ip addresses
       Networking support -> Networking options -> IP: kernel level autoconfiguration: yes
       File systems -> Network File Systems -> Root file system on NFS: yes
       Device Drivers -> Generic Driver Options -> Maintain devtmpfs to mount at /dev: yes

     If you whish you can further adjust the configuration to your needs

  5. A small Makefile fix
     To compile a simpleImage we need to fix the Makefile
     $WD/linux-xlnx/arch/microblaze/boot/Makefile by deleting
     line 33: $(call if_changed,uimage)
      
  6. Compile Linux
     To compile Linux we need the device tree from the hardware project and
     therefore compilation is done later but we need to prepare the kernel
     to build modules.
     > make -j3 linux.bin

3.3 Build the root filesystem

To run Linux we need a root filesystem to mount. In this section we
will build a minimal root filesystem by compiling busybox. If you
do not want to build the root filesystem by your own just download
it from the ReconOS homepage and extract it to $WD/nfs

  1. Download busybox
     > cd $WD
     > git clone git://git.busybox.net/busybox
     > cd busybox

  2. Change compile collection for busybox
     Since the toolchain provided by Xilinx's default installtion
     does not work for busybox we need to change the CROSS_COMPILE
     environment variable.
     > export CROSS_COMPILE_BAK=$CROSS_COMPILE
     > export CROSS_COMPILE=$HOME/reconos/microblaze_v2.0_le/microblazeel-unknown-linux-gnu/bin/microblazeel-unknown-linux-gnu-

  3. Configure and build busybox
     To create a minimal busybox setup we use the provided default
     configuration in the stepbystep folder.
     > cp $WD/reconos/docs/busybox_config_1_21_1.config .config
     > make -j3
     > make install

  4. Copy busybox to your root filesystem
     > mkdir $WD/nfs
     > cp -r _install/* $WD/nfs

  5. Create directories
     > mkdir dev etc etc/init.d lib mnt opt opt/reconos proc root sys tmp

  6. Create inittab
     Create $WD/nfs/etc/inittab by copying from the stepbystep directory

     >=== $WD/nfs/etc/inittab ===>
     ::sysinit:/etc/init.d/rcS

     # /bin/sh
     # 
     # Start an askfirst shell on the serial ports

     ttyUL1::respawn:-/bin/sh

     # What to do when restarting the init process

     ::restart:/sbin/init

     # What to do before rebooting

     ::shutdown:/bin/umount -a -r
     >=== $WD/nfs/etc/inittab ===>

  7. Create rcS
     Create $WD/nfs/etc/init.d/rcS with the following content and
     make it executable by
     > chmod +x $WD/nfs/etc/init.d/rcS

     >=== $WD/nfs/etc/init.d/rcS ===>
     #!/bin/sh

     echo "Starting rcS..."

     echo "++ Mounting filesystem"
     mount -t proc none /proc
     mount -t sysfs none /sys
     mount -t devtmpfs none /dev

     echo "rcS Complete"
     >=== $WD/nfs/etc/init.d/rcS ===>

  8. Restore CROSS_COMPILE
     > export CROSS_COMPILE=$CROSS_COMPILE_BAK
     > unset CROSS_COMPILE_BAK


3.3 Setup NFS

For the development it has proved advantegeous to mount the root filesystem
via NFS.
WARNING: If you develop with other people on the same network make
         shure that you do not use the same ip.

  1. Configure NFS
     Add the following line to your NFS config under /etc/exports
     $HOME/reconos/nfs 192.168.42.2(rw,no_root_squash,no_subtree_check)

  2. Create virutal network interface to communicate with your board
     > sudo ifconfig eth0:1 192.168.42.1 up
     You need to restart the NFS server after this


4. Compile ReconOS kernel module and setup ReconOS files

ReconOS combines all drivers needed in a single kernel module which needs
to be compiled and copied together with a initialization script to the
root filesystem.

  1. Compile ReconOS module
     > cd $RECONOS/linux/driver
     > make

  2. Copy ReconOS module and initialization script
     > mkdir -p $WD/nfs/opt/reconos
     > cp $RECONOS/linux/driver/mreconos.ko $WD/nfs/opt/reconos
     > cp $RECONOS/linux/scripts/reconos_init.sh $WD/nfs/opt/reconos
     > chmod +x $WD/nfs/opt/reconos/reconos_init.sh

You can then simply initialize the entire ReconOS system by executing
reconos_init.sh on the microblaze processor.


5. Compile ReconOS library

To compile your applications ReconOS provides all functions in a C library
which must be created.

  1. Compile ReconOS library
     > cd $RECONOS/linux/lib
     > make


6. Compiling the sort demo

  1. Adjust the setup config to your working environment
       - Open $RECONOS/demos/sort_demo/hw/setup_microblaze
       - Replace
           base_design=ml605_minimal_14.6
         by changing the tool version

  2. Create the hardware design by using the setup script
     > cd $RECONOS/demos/sort_demo/hw
     > reconos_setup.sh setup_microblaze

  3. Build project
     > cd edk_zynq_linux
     > xps -nw system
     xps> run hwclean
     xps> run bits
     xps> exit

  4. Copy device tree to Linux source tree
     > cp device_tree.dts $WD/linux-xlnx/arch/microblaze/boot/dts/reconos.dts

  5. Compile Linux with this device tree
     > cd $WD/linux-xlnx
     > make -j3 simpleImage.reconos

  6. Compile application and copy it to NFS share
     > cd $RECONOS/demos/sort_demo/linux
     > make
     > cp sort_demo $WD/nfs/opt/reconos


7. Running the sort demo

  1. Setting up the board
     At first you have to setup your ML605 board. Connect JTAG and
     UART to your PC and connect both to the same network.

  2. Program FPGA
     > cd $RECONOS/demos/sort_demo/hw/edk_microblaze_linux
     > reconos_download_bitstream.sh implementation/system.bit

  3. Open Minicom
     You need to open minicom to interact with the ML605
     > minicom -D /dev/ttyUSB0 -b11520

  4. Boot Linux
     > cd $WD/linux-xlnx
     > reconos_download_executable.sh arch/microblaze/boot/simpleImage.reconos

  5. Initialize ReconOS
     mb> cd /opt/reconos
     mb> ./reconos_init.sh

  6. Execute sort demo
     mb> cd /opt/reconos
     mb> ./sort_demo
     This shows how to use the sort_demo, e.g. you can run it with 4 HWTs and 2 SWTs
     on 16 blocks of data by calling
     mb> ./sort_demo 4 2 16

